{"version":3,"file":"static/js/513.ec861b20.chunk.js","mappings":"oJAyBA,IAvBkB,SAAHA,GAMR,IALLC,EAAKD,EAALC,MACAC,EAAOF,EAAPE,QAKA,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACLC,GAAI,CACFC,MAAO,OACPC,GAAI,GAENC,KAAK,QACLC,QAAQ,YACRC,MAAM,UACNR,QAASA,EAAQS,SAEhBV,GAGP,C,wGCoDA,IA7DoB,SAAHD,GAOT,IANNY,EAAMZ,EAANY,OACAC,EAAUb,EAAVa,WACAF,EAAQX,EAARW,SAKAG,GAA2BC,EAAAA,EAAAA,IACzB,iBAAO,CACLC,OAAQC,EAAAA,EAAAA,KACRC,KAAM,WACJL,EAAWD,EACb,EACAO,QAAS,SAACC,GAAO,MAAM,CACrBC,SAAUD,EAAQC,SAClBC,KAAMF,EAAQG,UACf,EACF,GACD,CAACX,EAAQC,IACVW,GAAAC,EAAAA,EAAAA,GAAAX,EAAA,GAZQO,EAAMG,EAAA,GAANH,OAAUH,EAAIM,EAAA,GAcvB,OACEE,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CACHL,MAAI,EACJM,GAAI,EACJC,IAAKX,EACLb,GAAI,CACFyB,WAAY,YACZC,YAAa,YACbC,aAAaC,EAAAA,EAAAA,IAAa,CAAEC,MAAAA,EAAAA,IAC5BC,cAAe,SACfC,WAAY,SACZC,SAAU,EACVC,GAAI,EACJC,GAAI,EACJC,SAAU,YACV7B,SAAA,EAEFR,EAAAA,EAAAA,KAACsC,EAAAA,EAAU,CAAChC,QAAQ,KAAKiC,MAAM,SAASC,GAAI,EAAEhC,SAC3CC,IAEFD,EACAU,IACClB,EAAAA,EAAAA,KAAA,OACEyC,MAAO,CACLJ,SAAU,WACVK,IAAK,EACLC,KAAM,EACNC,OAAQ,OACRzC,MAAO,OACP0C,OAAQ,EACRC,QAAS,GACTC,iBAAiBjB,EAAAA,EAAAA,IAAa,CAAEC,MAAAA,EAAAA,SAM5C,C,gICvEO,IAAMiB,EAAuB,SAACC,GAAgB,OACnDA,EAAMC,SAASC,YAAa,EAEjBC,EAAyB,SAACH,GAAgB,OACrDA,EAAMC,SAASG,cAAe,EAEnBC,EAAyB,SAACL,GAAgB,OACrDA,EAAMC,SAASK,MAAO,EAEXC,EAA+B,SAACP,GAAgB,OAC3DA,EAAMC,SAASO,oBAAqB,C,4NCVzBC,EAAmB,SAACT,GAAgB,OAAKA,EAAMU,QAAS,E,qJCIzDC,EAAa,SAAbA,GAAa,OAAbA,EAAa,kBAAbA,EAAa,cAAbA,EAAa,kBAAbA,EAAa,kBAAbA,EAAa,gBAAbA,CAAa,MCDZC,EAAmBC,EAAAA,GACtB,CACNC,KAAMD,EAAAA,KAAYE,MAAMC,OAAOC,OAAON,IAAgBO,WAEtDC,MAAON,EAAAA,KAAaO,UAAUC,IAAI,GAAGH,WAErCI,KAAMT,EAAAA,KAAaO,UAAUC,IAAI,GAAGE,IAAI,IAAIL,WAE5C1D,OAAQqD,EAAAA,KAAYE,MAAMC,OAAOC,OAAOO,EAAAA,IAAiBN,aAE1DA,WAEUO,EAAmBZ,EAAAA,GACtB,CACNM,MAAON,EAAAA,KAAaO,UAAUC,IAAI,GAAGH,WAErCI,KAAMT,EAAAA,KAAaO,UAAUC,IAAI,GAAGE,IAAI,IAAIL,WAE5C1D,OAAQqD,EAAAA,KAAYE,MAAMC,OAAOC,OAAOO,EAAAA,IAAiBN,aAE1DA,W,uCCsOH,EAzOqB,SAAHtE,GAeV,IAdN8E,EAAI9E,EAAJ8E,KACAC,EAAW/E,EAAX+E,YACAC,EAAEhF,EAAFgF,GACAC,EAAUjF,EAAViF,WACAC,EAAgBlF,EAAhBkF,iBACA7B,EAAQrD,EAARqD,SACA1C,EAAQX,EAARW,SAUAwE,GAOIC,EAAAA,EAAAA,IAA8C,CAChDC,KAAM,MACNC,SAAUjC,GACNkC,EAAAA,EAAAA,GAAYV,IACZU,EAAAA,EAAAA,GAAYvB,KAVhBwB,EAAQL,EAARK,SACAC,EAAON,EAAPM,QACAC,EAAYP,EAAZO,aACAC,EAAKR,EAALQ,MACAC,EAAKT,EAALS,MAAKC,EAAAV,EACLW,UAAaC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QAQjBC,EAA6D,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EACpEC,GAAI,IAAAlD,EAAA,OAAA+C,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEEtD,GAAmBuD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQL,GAAI,IAAEvB,GAAAA,EAAIC,WAAAA,IAC3CC,EAAiB7B,GACjBuC,IACAb,IAAc,wBAAA0B,EAAAI,OAAA,GAAAP,EAAA,KACf,gBAPkEQ,GAAA,OAAAZ,EAAAa,MAAA,KAAAC,UAAA,KAS7DC,EAAqB,SAAC/C,GAC1B,OAAQA,GACN,KAAKH,EAAcmD,QACjB,MAAO,cACT,KAAKnD,EAAcoD,MACjB,MAAO,YACT,QACE,MAAO,mBAEb,EAEA,OACEhH,EAAAA,EAAAA,KAACiH,EAAAA,EAAM,CAACtC,KAAMA,EAAMuC,QAAStC,EAAYpE,UACvCe,EAAAA,EAAAA,MAAC4F,EAAAA,EAAK,CACJjH,GAAI,CACFC,MAAO,IACPiH,eAAgB,SAChBC,EAAG,EACHzE,OAAQ,eACRpC,SAAA,EAEFR,EAAAA,EAAAA,KAACsC,EAAAA,EAAU,CAAChC,QAAQ,KAAKgH,GAAI,EAAE9G,SAAC,iBAG/BgF,EAAM,UAAY5B,EAAcmD,QAAUvG,EAAW,MAEtDe,EAAAA,EAAAA,MAAA,QACEuE,SAAUP,EAAaO,GACvBrD,MAAO,CACL8E,QAAS,OACTvF,cAAe,SACfwF,IAAK,IACLhH,SAAA,EAGFR,EAAAA,EAAAA,KAACyH,EAAAA,GAAU,CACTC,KAAK,OACLpC,QAASA,EACTqC,OAAQ,eAAAC,EAAA,OACNrG,EAAAA,EAAAA,MAACsG,EAAAA,GAASpB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACRvG,GAAI,CACFC,MAAO,QAET0E,GAAG,OACH/E,MAAM,cACNgI,QAAM,EACNzH,KAAK,QACL0H,aAA4B,QAAhBH,EAAU,OAAR1E,QAAQ,IAARA,OAAQ,EAARA,EAAUa,YAAI,IAAA6D,EAAAA,EAAIhE,EAAcoE,QAC9C1H,QAAQ,WACR2H,WAAY,CACVC,WAAYhF,EACZiF,UAAajF,EAAW,oBAAiBkF,IAEvC/C,EAAS,SAAO,IAAA7E,SAAA,EAEpBR,EAAAA,EAAAA,KAACqI,EAAAA,EAAQ,CAEPjE,MAAOR,EAAcoE,QAAQxH,SAC9B,YAFMoD,EAAcoE,UAMrBhI,EAAAA,EAAAA,KAACqI,EAAAA,EAAQ,CAEPjE,MAAOR,EAAc0E,QAAQ9H,SAC9B,YAFMoD,EAAc0E,UAMrBtI,EAAAA,EAAAA,KAACqI,EAAAA,EAAQ,CAEPjE,MAAOR,EAAc2E,OAAO/H,SAC7B,UAFMoD,EAAc2E,SAMrBvI,EAAAA,EAAAA,KAACqI,EAAAA,EAAQ,CAEPjE,MAAOR,EAAcmD,QAAQvG,SAC9B,WAFMoD,EAAcmD,UAMrB/G,EAAAA,EAAAA,KAACqI,EAAAA,EAAQ,CAA2BjE,MAAOR,EAAcoD,MAAMxG,SAAC,SAAjDoD,EAAcoD,UAGnB,KAKhBhH,EAAAA,EAAAA,KAACyH,EAAAA,GAAU,CACTC,KAAK,QACLpC,QAASA,EACTqC,OAAQ,eAAAa,EAAA,OACNxI,EAAAA,EAAAA,KAAC6H,EAAAA,GAASpB,EAAAA,EAAAA,GAAA,CACRvG,GAAI,CACFC,MAAO,QAET0E,GAAG,QACH/E,MAAOgH,EAAmBtB,EAAM,SAChCzB,KAAK,SACL1D,KAAK,QACLC,QAAQ,WACRyH,aAA6B,QAAjBS,EAAU,OAARtF,QAAQ,IAARA,OAAQ,EAARA,EAAUkB,aAAK,IAAAoE,EAAAA,EAAI,IAC7BnD,EAAS,UACb,IAGLO,EAAOxB,OACNpE,EAAAA,EAAAA,KAACsC,EAAAA,EAAU,CAAChC,QAAQ,QAAQC,MAAM,QAAOC,SACtCoF,EAAOxB,MAAMqE,UAEd,MAEJzI,EAAAA,EAAAA,KAACyH,EAAAA,GAAU,CACTC,KAAK,OACLpC,QAASA,EACTqC,OAAQ,eAAAe,EAAA,OACN1I,EAAAA,EAAAA,KAAC6H,EAAAA,GAASpB,EAAAA,EAAAA,GAAA,CACRvG,GAAI,CACFC,MAAO,QAET0E,GAAG,OACH/E,MAAM,OACNO,KAAK,QACLC,QAAQ,WACRyD,KAAK,SACLgE,aAA4B,QAAhBW,EAAU,OAARxF,QAAQ,IAARA,OAAQ,EAARA,EAAUqB,YAAI,IAAAmE,EAAAA,EAAI,EAChCC,SAAUnD,EAAM,UAAY5B,EAAcmD,SACtC1B,EAAS,SACb,IAGLO,EAAOrB,MACNvE,EAAAA,EAAAA,KAACsC,EAAAA,EAAU,CAAChC,QAAQ,QAAQC,MAAM,QAAOC,SACtCoF,EAAOrB,KAAKkE,UAEb,MAGJzI,EAAAA,EAAAA,KAACyH,EAAAA,GAAU,CACTC,KAAK,SACLpC,QAASA,EACTqC,OAAQ,eAAAiB,EAAA,OACNrH,EAAAA,EAAAA,MAACsG,EAAAA,GAASpB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACRvG,GAAI,CACFC,MAAO,QAET0E,GAAG,SACH/E,MAAM,gBACNgI,QAAM,EACNzH,KAAK,QACL0H,aAA8B,QAAlBa,EAAU,OAAR1F,QAAQ,IAARA,OAAQ,EAARA,EAAUzC,cAAM,IAAAmI,EAAAA,EAAInE,EAAAA,EAAAA,KAClCnE,QAAQ,YACJ+E,EAAS,WAAS,IAAA7E,SAAA,EAEtBR,EAAAA,EAAAA,KAACqI,EAAAA,EAAQ,CAA2BjE,MAAOK,EAAAA,EAAAA,KAAoBjE,SAC5DiE,EAAAA,EAAAA,MADYA,EAAAA,EAAAA,OAIfzE,EAAAA,EAAAA,KAACqI,EAAAA,EAAQ,CAEPjE,MAAOK,EAAAA,EAAAA,WAA0BjE,SAEhCiE,EAAAA,EAAAA,YAHIA,EAAAA,EAAAA,aAMPzE,EAAAA,EAAAA,KAACqI,EAAAA,EAAQ,CAA2BjE,MAAOK,EAAAA,EAAAA,KAAoBjE,SAC5DiE,EAAAA,EAAAA,MADYA,EAAAA,EAAAA,SAGL,KAIhBzE,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACLC,GAAI,CACFC,MAAO,QAETE,KAAK,QACL0D,KAAK,SACLzD,QAAQ,YACRC,MAAM,UACNoI,UAAW9C,EAAQrF,SACpB,gBAOX,ECvJA,EA/EqB,SAAHX,GAUX,IATLqD,EAAQrD,EAARqD,SACA2F,EAAehJ,EAAfgJ,gBACAC,EAAYjJ,EAAZiJ,aACAC,EAAoBlJ,EAApBkJ,qBAQAC,GAAsCC,EAAAA,EAAAA,WAAkB,GAAMC,GAAA5H,EAAAA,EAAAA,GAAA0H,EAAA,GAAvDG,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAGlCG,GAA+BC,EAAAA,EAAAA,IAAQ,iBAAO,CAC5CvF,KAAMjD,EAAAA,EAAAA,KACNE,QAAS,SAACC,GAAO,MAAM,CACrBsI,aAActI,EAAQsI,aACvB,EACF,IAAEC,GAAAlI,EAAAA,EAAAA,GAAA+H,EAAA,GALME,EAAUC,EAAA,GAAVD,WAAcE,EAAID,EAAA,GAQrBE,EAAkB,SACtB5J,EACAsE,GAAiC,OAEjCpE,EAAAA,EAAAA,KAAC6H,EAAAA,EAAS,CACR3H,GAAI,CACFC,MAAO,OACPqC,GAAI,GAEN1C,MAAOA,EACPO,KAAK,QACLC,QAAQ,WACR8D,MAAOA,EACPuE,UAAQ,GACR,EAGJ,OACEpH,EAAAA,EAAAA,MAAAoI,EAAAA,SAAA,CAAAnJ,SAAA,EACEe,EAAAA,EAAAA,MAACqI,EAAAA,EAAI,CACH1J,GAAI,CAAEsC,GAAI,EAAGqH,OAAQ,UAAW/G,QAASyG,EAAa,GAAM,GAC5DO,YAAa,WACXjB,EAAgB3F,EAClB,EACAxB,IAAK+H,EAAKjJ,SAAA,EAEVe,EAAAA,EAAAA,MAACwI,EAAAA,EAAW,CAAAvJ,SAAA,CACTkJ,EAAgB,OAAQxG,EAASa,MACjC2F,EAAgB,QAASxG,EAASkB,OAClCsF,EAAgB,OAAQxG,EAASqB,UAEpChD,EAAAA,EAAAA,MAACyI,EAAAA,EAAW,CACV9J,GAAI,CACFkH,eAAgB,iBAChB5G,SAAA,EAEFR,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACI,KAAK,QAAQN,QAAS,kBAAMqJ,GAAe,EAAK,EAAC5I,SAAC,UAG1DR,EAAAA,EAAAA,KAACiK,EAAAA,EAAU,CAAClK,QAAS,kBAAM+I,EAAa5F,EAAS,EAAC1C,UAChDR,EAAAA,EAAAA,KAACkK,EAAAA,EAAiB,CAAChK,GAAI,CAAEK,MAAO,yBAItCP,EAAAA,EAAAA,KAACmK,EAAY,CACXxF,KAAMwE,EACNvE,YAAa,kBAAMwE,GAAe,EAAM,EACxCvE,GAAI3B,EAAS2B,GACbC,WAAY5B,EAAS4B,WACrBC,iBAAkBgE,EAClB7F,SAAUA,MAIlB,E,gDCtEA,EApBwB,SAAHrD,GAMd,IALLuK,EAAIvK,EAAJuK,KACAzG,EAAQ9D,EAAR8D,SAKA,OACEpC,EAAAA,EAAAA,MAACqI,EAAAA,EAAI,CAAC1J,GAAI,CAAEsC,GAAI,EAAG6E,EAAG,GAAI7G,SAAA,EACxBe,EAAAA,EAAAA,MAACe,EAAAA,EAAU,CAAChC,QAAQ,QAAQ+J,UAAU,IAAIC,GAAI,EAAG/J,MAAO,aAAaC,SAAA,EACnER,EAAAA,EAAAA,KAACuK,EAAAA,EAAc,IAAG,KAACvK,EAAAA,EAAAA,KAACwK,EAAAA,EAAgB,IAAG,uBAAqBJ,EAAK,QAEnE7I,EAAAA,EAAAA,MAACe,EAAAA,EAAU,CAAChC,QAAQ,QAAQ+J,UAAU,IAAIC,GAAI,EAAE9J,SAAA,EAC7CiK,EAAAA,EAAAA,YAAW9G,EAAS+G,QAAQ,GAAGC,aAAa,sCACnCC,KAAKC,MAAMlH,EAASmH,KAAKC,KAAO,KAAK,UAIvD,EC+OA,EA/NqB,WAEnB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACTrG,GAAesG,EAAAA,EAAAA,MAAftG,WACFuG,GAAmBC,EAAAA,EAAAA,SAAgB,GACzCtC,GAAsCC,EAAAA,EAAAA,WAAkB,GAAMC,GAAA5H,EAAAA,EAAAA,GAAA0H,EAAA,GAAvDG,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAC5BqC,GAAkBD,EAAAA,EAAAA,aAA8BlD,GAChDoD,GAAwBF,EAAAA,EAAAA,UAC9BG,GAAsCxC,EAAAA,EAAAA,UAA+B,MAAKyC,GAAApK,EAAAA,EAAAA,GAAAmK,EAAA,GAAnEE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAG5BvI,GAAe0I,EAAAA,EAAAA,IAAe7I,EAAAA,IAC9B8I,GAAeD,EAAAA,EAAAA,IAAeE,EAAAA,IAC9B1I,GAAiBwI,EAAAA,EAAAA,IAAezI,EAAAA,IAChC4I,GAAiBH,EAAAA,EAAAA,IAAevI,EAAAA,IAChCK,GAAWkI,EAAAA,EAAAA,IAAenI,GAChCuI,GAAmCJ,EAAAA,EAAAA,IACjCrI,EAAAA,IADM0I,EAAID,EAAJC,KAAMC,EAAUF,EAAVE,WAAYC,EAAIH,EAAJG,MAK1BC,EAAAA,EAAAA,YAAU,WACR,GAAIhB,EAAiBiB,QAInB,OAHAtB,GAASuB,EAAAA,EAAAA,OACTvB,GAASwB,EAAAA,EAAAA,YACTnB,EAAiBiB,SAAU,EAG/B,GAAG,KAEHD,EAAAA,EAAAA,YAAU,WACHvH,GAEAgH,IAEAA,EAAaW,QAKlBlB,EAAgBe,QAAUR,EAAaY,MACrC,SAACC,GAAQ,OAAKA,EAAS9H,MAAQC,CAAU,IAGtCyG,EAAgBe,SAKrBtB,GAAS4B,EAAAA,EAAAA,GAAQrB,EAAgBe,QAAQO,OAEpCtB,EAAgBe,QAAQQ,aAC7B9B,GAAS+B,EAAAA,EAAAA,IAAwBxB,EAAgBe,QAAQQ,eAPvD5B,EAAS,mBATTA,EAAS,kBAiBb,GAAG,CAACpG,EAAY3B,EAAc2I,EAAchH,KAE5CuH,EAAAA,EAAAA,YAAU,WACR,IAAMW,EAAYC,IACdD,IAAcxB,EAAsBc,SACnCf,EAAgBe,UAErBd,EAAsBc,QAAUU,EAChChC,GACEkC,EAAAA,EAAAA,KAAczG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACX8E,EAAgBe,SAAO,IAC1B7L,OAAQuM,MAGd,GAAG,CAACd,EAAMC,EAAYC,KAEtBC,EAAAA,EAAAA,YAAU,WACR,GAAKd,EAAgBe,SAChB3I,EAASyC,KAAd,CAEA,IAAM+G,EAAc5B,EAAgBe,QAAQO,KAG5C,IADuBO,MAAQC,QAAQF,EAAa,OACpD,CAEA,IAAMG,EAAsB3J,EAASyC,KAAKmH,KAAKC,QAAO,SAAA3N,GAAS,OAAAA,EAAN4N,OAChDC,WAAWP,EAAY,IAG1BQ,EACJL,EAAoBZ,MAAK,SAAA3G,GAAS,OAAAA,EAAN0H,OAAoBG,SAAS,WAAW,KACpEN,EAAoB,GAEhBO,EACyC,SAA7CF,EAAyBjD,QAAQ,GAAGI,MACpC6C,EAAyB7C,KAAKC,KAAO,IAElC8C,GAAkBlC,GAAaC,EAAe,MAE/CiC,GAAejC,EAAe+B,EAhBR,CALA,CAsB5B,GAAG,CAACpC,EAAgBe,QAAS3I,EAASyC,OAGtC,IAAMyC,EAAkB,SAAC3F,GACvB8H,GAAS8C,EAAAA,EAAAA,IAAkB5K,GAC7B,EAEM+J,EAAoB,WACxB,OAAId,EAAWM,QAAWP,EAAKO,QAAUL,EAAKK,OACrChI,EAAAA,EAAAA,YACJyH,EAAKO,QAAUL,EAAKK,OAAehI,EAAAA,EAAAA,KACjCA,EAAAA,EAAAA,IACT,EAEM/D,EAAa,SAACD,GAClB,GAAK4C,EAAL,CAEA,IAAM0K,GAA0BtH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC3BpD,GAAc,IACjB5C,OAAAA,IAGFuK,GAASgD,EAAAA,EAAAA,IAAeD,IACxB/C,GAASiD,EAAAA,EAAAA,MARkB,CAS7B,EAEMlF,EAAuB,SAAC7F,GAC5B8H,GAASgD,EAAAA,EAAAA,IAAe9K,GAC1B,EA0BMgL,EAAuB,SAAChL,GACvBqI,EAAgBe,SAKrBtB,GACEkC,EAAAA,EAAAA,KAAczG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACX8E,EAAgBe,SAAO,IAC1BQ,YAAavB,EAAgBe,QAAQQ,YAAYU,QAC/C,SAAC3I,GAAE,OAAKA,IAAO3B,EAAS2B,EAAE,QAKhCmG,GAASmD,EAAAA,EAAAA,IAAejL,EAAS2B,KACjCmG,GAASiD,EAAAA,EAAAA,QAdP/C,EAAS,iBAeb,EAGMkD,EAAa,SAAClL,GAAmB,OACrClD,EAAAA,EAAAA,KAACqO,EAAY,CAEXnL,SAAUA,EACV2F,gBAAiBA,EACjBC,aAAcoF,EACdnF,qBAAsBA,GAJjB7F,EAAS2B,GAKd,EAGJ,OACEtD,EAAAA,EAAAA,MAAAoI,EAAAA,SAAA,CAAAnJ,SAAA,EACER,EAAAA,EAAAA,KAACsC,EAAAA,EAAU,CAAChC,QAAQ,KAAKF,GAAI,EAAEI,SAAC,6BAGhCe,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CACH8M,WAAS,EACTC,UAAW,aACXrM,SAAU,EACVsM,UAAW,OACXnH,EAAG,EAAE7G,SAAA,EAELe,EAAAA,EAAAA,MAACkN,EAAAA,EAAW,CAAChO,OAAQgE,EAAAA,EAAAA,KAAqB/D,WAAYA,EAAWF,SAAA,CAC9D0L,EAAKO,OAASP,EAAKwC,IAAIN,GAAc,MACtCpO,EAAAA,EAAAA,KAAC2O,EAAAA,EAAS,CAAC7O,MAAM,eAAeC,QApET,WACxB+E,GAELsE,GAAe,EACjB,QAmEMpJ,EAAAA,EAAAA,KAACyO,EAAAA,EAAW,CAAChO,OAAQgE,EAAAA,EAAAA,WAA2B/D,WAAYA,EAAWF,SACpE2L,EAAWM,OAASN,EAAWuC,IAAIN,GAAc,QAGpDpO,EAAAA,EAAAA,KAACyO,EAAAA,EAAW,CAAChO,OAAQgE,EAAAA,EAAAA,KAAqB/D,WAAYA,EAAWF,SAC9D4L,EAAKK,OAASL,EAAKsC,IAAIN,GAAc,UAGzCtJ,GACC9E,EAAAA,EAAAA,KAACmK,EAAY,CACXxF,KAAMwE,EACNvE,YAAa,kBAAMwE,GAAe,EAAM,EACxCvE,GAAImH,EACJlH,YAAaA,EACbC,iBA/EqB,SAAC7B,GAC5B,IAAKqI,EAAgBe,QAGnB,OAFAlD,GAAe,QACf8B,EAAS,kBAIXF,GAAS4D,EAAAA,EAAAA,IAAY1L,IACrB8H,GACEkC,EAAAA,EAAAA,KAAczG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACX8E,EAAgBe,SAAO,IAC1BQ,YAAY,GAAD+B,QAAAC,EAAAA,EAAAA,GAAMvD,EAAgBe,QAAQQ,aAAW,CAAE5J,EAAS2B,SAInEuE,GAAe,EACjB,EA+D+C5I,SAEtCmL,GAAehI,EAASyC,MACvBpG,EAAAA,EAAAA,KAAC+O,EAAe,CACd3E,KAAMzG,EAASyC,KAAKgE,KAAK1C,KACzB/D,SAAUgI,IAEV,OAEJ,OAGV,C,gICtQO,IAGMqD,EAAc,SAAHjJ,GAAW,OAAAA,EAALhE,MAA0BkN,QAAQC,QAAQpE,IAAK,EAChEhJ,EAAe,SAAHqN,GAAW,OAAAA,EAALpN,MAA0BkN,QAAQC,QAAQE,KAAM,EAElEC,EAAoB,SAAHC,GAAW,OAAAA,EAALvN,MAC5BkN,QAAQC,QAAQnM,eAAgB,EAG3BwM,EAAY,SAAHC,GAAW,OAAAA,EAALzN,MAA0BkN,QAAQQ,MAAM3E,IAAK,C,uDCblE,IAAKhK,EAAQ,SAARA,GAAQ,OAARA,EAAQ,YAARA,CAAQ,K","sources":["app/components/addButton.component.tsx","app/components/boardLine.component.tsx","app/exercise/store/exercise.selectors.ts","app/forecast/store/forecast.selectors.ts","types/exercise.types.ts","app/components/exerciseForm.const.ts","app/components/exerciseForm.component.tsx","app/components/exerciseCard.component.tsx","app/components/forecast.component.tsx","app/training/training.page.tsx","theme/mainTheme.actions.ts","types/dndItems.enum.ts"],"sourcesContent":["import { Button } from \"@mui/material\";\r\n\r\nconst AddButton = ({\r\n  label,\r\n  onClick,\r\n}: {\r\n  label: string;\r\n  onClick: (...args: any) => any;\r\n}) => {\r\n  return (\r\n    <Button\r\n      sx={{\r\n        width: \"100%\",\r\n        mt: 3,\r\n      }}\r\n      size=\"small\"\r\n      variant=\"contained\"\r\n      color=\"success\"\r\n      onClick={onClick}\r\n    >\r\n      {label}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default AddButton;\r\n","import { PropsWithChildren } from \"react\";\r\n\r\n// ===================== dnd =====================\r\nimport { useDrop } from \"react-dnd\";\r\n\r\n// ===================== mui =====================\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport { primaryLight } from \"../../theme/mainTheme.actions\";\r\nimport theme from \"../../theme/mainTheme\";\r\n\r\n// ===================== types =====================\r\nimport { ActivityStatus } from \"../../types/activityStatus.enum\";\r\nimport { DndItems } from \"../../types/dndItems.enum\";\r\n\r\nconst BoardColumn = ({\r\n  status,\r\n  handleDrop,\r\n  children,\r\n}: PropsWithChildren<{\r\n  status: ActivityStatus;\r\n  handleDrop: (status: ActivityStatus) => void;\r\n}>) => {\r\n  const [{ isOver }, drop] = useDrop(\r\n    () => ({\r\n      accept: DndItems.card,\r\n      drop: () => {\r\n        handleDrop(status);\r\n      },\r\n      collect: (monitor) => ({\r\n        isOver: !!monitor.isOver(),\r\n        item: monitor.getItem(),\r\n      }),\r\n    }),\r\n    [status, handleDrop]\r\n  );\r\n\r\n  return (\r\n    <Grid\r\n      item\r\n      sm={4}\r\n      ref={drop}\r\n      sx={{\r\n        borderLeft: \"solid 1px\",\r\n        borderRight: \"solid 1px\",\r\n        borderColor: primaryLight({ theme }),\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        flexGrow: 1,\r\n        pl: 3,\r\n        pr: 3,\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <Typography variant=\"h5\" align=\"center\" mb={2}>\r\n        {status}\r\n      </Typography>\r\n      {children}\r\n      {isOver && (\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            top: 0,\r\n            left: 0,\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            zIndex: 1,\r\n            opacity: 0.1,\r\n            backgroundColor: primaryLight({ theme }),\r\n          }}\r\n        />\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default BoardColumn;\r\n","import { RootState } from \"../../../store\";\r\n\r\nexport const exerciseListSelector = (state: RootState) =>\r\n  state.exercise.exerciseList;\r\n\r\nexport const chosenExerciseSelector = (state: RootState) =>\r\n  state.exercise.chosenExercise;\r\n\r\nexport const nextExerciseIdSelector = (state: RootState) =>\r\n  state.exercise.nextId;\r\n\r\nexport const trainingExerciseListSelector = (state: RootState) =>\r\n  state.exercise.trainingExerciseList;\r\n","import { RootState } from \"../../../store\";\r\n\r\nexport const forecastSelector = (state: RootState) => state.forecast;\r\n","import { ActivityStatus } from \"./activityStatus.enum\";\r\n\r\nexport interface IExerciseCardProps {\r\n  type: ExerciseTypes;\r\n}\r\n\r\nexport enum ExerciseTypes {\r\n  running = \"Running\",\r\n  plank = \"Plank\",\r\n  pullups = \"Pullups\",\r\n  pushups = \"Pushups\",\r\n  squats = \"Squats\",\r\n}\r\n\r\nexport interface IExercise {\r\n  id: number;\r\n  status: ActivityStatus;\r\n  type: ExerciseTypes;\r\n  value: number;\r\n  sets: number;\r\n  trainingId: number;\r\n}\r\n","import * as yup from \"yup\";\r\n\r\nimport { ExerciseTypes } from \"../../types/exercise.types\";\r\nimport { ActivityStatus } from \"../../types/activityStatus.enum\";\r\n\r\nexport const createFormSchema = yup\r\n  .object({\r\n    type: yup.mixed().oneOf(Object.values(ExerciseTypes)).required(),\r\n\r\n    value: yup.number().integer().min(1).required(),\r\n\r\n    sets: yup.number().integer().min(1).max(99).required(),\r\n\r\n    status: yup.mixed().oneOf(Object.values(ActivityStatus)).required(),\r\n  })\r\n  .required();\r\n\r\nexport const updateFormSchema = yup\r\n  .object({\r\n    value: yup.number().integer().min(1).required(),\r\n\r\n    sets: yup.number().integer().min(1).max(99).required(),\r\n\r\n    status: yup.mixed().oneOf(Object.values(ActivityStatus)).required(),\r\n  })\r\n  .required();\r\n","// ===================== hook form =====================\r\nimport { useForm, SubmitHandler, Controller } from \"react-hook-form\";\r\n\r\n// ===================== yup =====================\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { createFormSchema, updateFormSchema } from \"./exerciseForm.const\";\r\n\r\n// ===================== mui =====================\r\nimport {\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  MenuItem,\r\n  Dialog,\r\n} from \"@mui/material\";\r\n\r\n// ===================== types =====================\r\nimport { ExerciseTypes, IExercise } from \"../../types/exercise.types\";\r\nimport { ActivityStatus } from \"../../types/activityStatus.enum\";\r\nimport { PropsWithChildren } from \"react\";\r\n\r\nconst ExerciseForm = ({\r\n  open,\r\n  handleClose,\r\n  id,\r\n  trainingId,\r\n  handleSubmitForm,\r\n  exercise,\r\n  children,\r\n}: PropsWithChildren<{\r\n  open: boolean;\r\n  handleClose: () => void;\r\n  id: number;\r\n  trainingId: number;\r\n  handleSubmitForm: (exercise: IExercise) => void;\r\n  exercise?: IExercise;\r\n}>) => {\r\n  // ===== hook form =====\r\n  const {\r\n    register,\r\n    control,\r\n    handleSubmit,\r\n    watch,\r\n    reset,\r\n    formState: { errors, isValid },\r\n  } = useForm<Omit<IExercise, \"id\" | \"trainingId\">>({\r\n    mode: \"all\",\r\n    resolver: exercise\r\n      ? yupResolver(updateFormSchema)\r\n      : yupResolver(createFormSchema),\r\n  });\r\n\r\n  const onSubmit: SubmitHandler<Omit<IExercise, \"id\" | \"trainingId\">> = async (\r\n    data\r\n  ) => {\r\n    const exercise: IExercise = { ...data, id, trainingId };\r\n    handleSubmitForm(exercise);\r\n    reset();\r\n    handleClose();\r\n  };\r\n\r\n  const getValueFieldLabel = (type: ExerciseTypes) => {\r\n    switch (type) {\r\n      case ExerciseTypes.running:\r\n        return \"Distance, m\";\r\n      case ExerciseTypes.plank:\r\n        return \"Time, sec\";\r\n      default:\r\n        return \"Rep per set, rep\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onClose={handleClose}>\r\n      <Paper\r\n        sx={{\r\n          width: 300,\r\n          justifyContent: \"center\",\r\n          p: 3,\r\n          height: \"max-content\",\r\n        }}\r\n      >\r\n        <Typography variant=\"h6\" pb={3}>\r\n          Add exercise\r\n        </Typography>\r\n        {watch(\"type\") === ExerciseTypes.running ? children : null}\r\n\r\n        <form\r\n          onSubmit={handleSubmit(onSubmit)}\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            gap: 10,\r\n          }}\r\n        >\r\n          {/* Type select */}\r\n          <Controller\r\n            name=\"type\"\r\n            control={control}\r\n            render={() => (\r\n              <TextField\r\n                sx={{\r\n                  width: \"100%\",\r\n                }}\r\n                id=\"type\"\r\n                label=\"Select type\"\r\n                select\r\n                size=\"small\"\r\n                defaultValue={exercise?.type ?? ExerciseTypes.pullups}\r\n                variant=\"outlined\"\r\n                InputProps={{\r\n                  readOnly: !!exercise,\r\n                  className: !!exercise ? \"Mui-disabled\" : undefined,\r\n                }}\r\n                {...register(\"type\")}\r\n              >\r\n                <MenuItem\r\n                  key={ExerciseTypes.pullups}\r\n                  value={ExerciseTypes.pullups}\r\n                >\r\n                  Pull-ups\r\n                </MenuItem>\r\n\r\n                <MenuItem\r\n                  key={ExerciseTypes.pushups}\r\n                  value={ExerciseTypes.pushups}\r\n                >\r\n                  Push-ups\r\n                </MenuItem>\r\n\r\n                <MenuItem\r\n                  key={ExerciseTypes.squats}\r\n                  value={ExerciseTypes.squats}\r\n                >\r\n                  Squats\r\n                </MenuItem>\r\n\r\n                <MenuItem\r\n                  key={ExerciseTypes.running}\r\n                  value={ExerciseTypes.running}\r\n                >\r\n                  Running\r\n                </MenuItem>\r\n\r\n                <MenuItem key={ExerciseTypes.plank} value={ExerciseTypes.plank}>\r\n                  Plank\r\n                </MenuItem>\r\n              </TextField>\r\n            )}\r\n          />\r\n\r\n          {/* Fields */}\r\n          <Controller\r\n            name=\"value\"\r\n            control={control}\r\n            render={() => (\r\n              <TextField\r\n                sx={{\r\n                  width: \"100%\",\r\n                }}\r\n                id=\"value\"\r\n                label={getValueFieldLabel(watch(\"type\"))}\r\n                type=\"number\"\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                defaultValue={exercise?.value ?? \"\"}\r\n                {...register(\"value\")}\r\n              />\r\n            )}\r\n          />\r\n          {errors.value ? (\r\n            <Typography variant=\"body2\" color=\"error\">\r\n              {errors.value.message}\r\n            </Typography>\r\n          ) : null}\r\n\r\n          <Controller\r\n            name=\"sets\"\r\n            control={control}\r\n            render={() => (\r\n              <TextField\r\n                sx={{\r\n                  width: \"100%\",\r\n                }}\r\n                id=\"sets\"\r\n                label=\"Sets\"\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                type=\"number\"\r\n                defaultValue={exercise?.sets ?? 1}\r\n                disabled={watch(\"type\") === ExerciseTypes.running}\r\n                {...register(\"sets\")}\r\n              />\r\n            )}\r\n          />\r\n          {errors.sets ? (\r\n            <Typography variant=\"body2\" color=\"error\">\r\n              {errors.sets.message}\r\n            </Typography>\r\n          ) : null}\r\n\r\n          {/* Status select */}\r\n          <Controller\r\n            name=\"status\"\r\n            control={control}\r\n            render={() => (\r\n              <TextField\r\n                sx={{\r\n                  width: \"100%\",\r\n                }}\r\n                id=\"status\"\r\n                label=\"Select status\"\r\n                select\r\n                size=\"small\"\r\n                defaultValue={exercise?.status ?? ActivityStatus.toDo}\r\n                variant=\"outlined\"\r\n                {...register(\"status\")}\r\n              >\r\n                <MenuItem key={ActivityStatus.toDo} value={ActivityStatus.toDo}>\r\n                  {ActivityStatus.toDo}\r\n                </MenuItem>\r\n\r\n                <MenuItem\r\n                  key={ActivityStatus.inProgress}\r\n                  value={ActivityStatus.inProgress}\r\n                >\r\n                  {ActivityStatus.inProgress}\r\n                </MenuItem>\r\n\r\n                <MenuItem key={ActivityStatus.done} value={ActivityStatus.done}>\r\n                  {ActivityStatus.done}\r\n                </MenuItem>\r\n              </TextField>\r\n            )}\r\n          />\r\n\r\n          <Button\r\n            sx={{\r\n              width: \"100%\",\r\n            }}\r\n            size=\"small\"\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"success\"\r\n            disabled={!isValid}\r\n          >\r\n            Save\r\n          </Button>\r\n        </form>\r\n      </Paper>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default ExerciseForm;\r\n","import { useState } from \"react\";\r\n\r\n// ===================== dnd =====================\r\nimport { useDrag } from \"react-dnd\";\r\n\r\n// ===================== mui =====================\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Button,\r\n  IconButton,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\n\r\n// ===================== types =====================\r\nimport { DndItems } from \"../../types/dndItems.enum\";\r\nimport { IExercise } from \"../../types/exercise.types\";\r\n\r\n// ===================== components =====================\r\nimport ExerciseForm from \"./exerciseForm.component\";\r\n\r\nconst ExerciseCard = ({\r\n  exercise,\r\n  handleDragStart,\r\n  handleDelete,\r\n  handleUpdateExercise,\r\n}: {\r\n  exercise: IExercise;\r\n  handleDragStart: (exercise: IExercise) => void;\r\n  handleDelete: (exercise: IExercise) => void;\r\n  handleUpdateExercise: (exercise: IExercise) => void;\r\n}) => {\r\n  // ===== hooks =====\r\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\r\n\r\n  // ===== dnd =====\r\n  const [{ isDragging }, drag] = useDrag(() => ({\r\n    type: DndItems.card,\r\n    collect: (monitor) => ({\r\n      isDragging: !!monitor.isDragging(),\r\n    }),\r\n  }));\r\n\r\n  // ===== render =====\r\n  const renderTextField = (\r\n    label: string,\r\n    value: IExercise[keyof IExercise]\r\n  ) => (\r\n    <TextField\r\n      sx={{\r\n        width: \"100%\",\r\n        mb: 2,\r\n      }}\r\n      label={label}\r\n      size=\"small\"\r\n      variant=\"outlined\"\r\n      value={value}\r\n      disabled\r\n    />\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Card\r\n        sx={{ mb: 2, cursor: \"pointer\", opacity: isDragging ? 0.5 : 1 }}\r\n        onDragStart={() => {\r\n          handleDragStart(exercise);\r\n        }}\r\n        ref={drag}\r\n      >\r\n        <CardContent>\r\n          {renderTextField(\"Type\", exercise.type)}\r\n          {renderTextField(\"Value\", exercise.value)}\r\n          {renderTextField(\"Sets\", exercise.sets)}\r\n        </CardContent>\r\n        <CardActions\r\n          sx={{\r\n            justifyContent: \"space-between\",\r\n          }}\r\n        >\r\n          <Button size=\"small\" onClick={() => setIsModalOpen(true)}>\r\n            Edit\r\n          </Button>\r\n          <IconButton onClick={() => handleDelete(exercise)}>\r\n            <DeleteForeverIcon sx={{ color: \"error.main\" }} />\r\n          </IconButton>\r\n        </CardActions>\r\n      </Card>\r\n      <ExerciseForm\r\n        open={isModalOpen}\r\n        handleClose={() => setIsModalOpen(false)}\r\n        id={exercise.id}\r\n        trainingId={exercise.trainingId}\r\n        handleSubmitForm={handleUpdateExercise}\r\n        exercise={exercise}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExerciseCard;\r\n","import { upperFirst } from \"lodash\";\r\n\r\n// ===================== mui =====================\r\nimport { Typography, Card } from \"@mui/material\";\r\nimport ThermostatIcon from \"@mui/icons-material/Thermostat\";\r\nimport ThunderstormIcon from \"@mui/icons-material/Thunderstorm\";\r\n\r\n// ===================== types =====================\r\nimport { IForecastItem } from \"../../types/api.types\";\r\n\r\nconst WeatherForecast = ({\r\n  city,\r\n  forecast,\r\n}: {\r\n  city: string;\r\n  forecast: IForecastItem;\r\n}) => {\r\n  return (\r\n    <Card sx={{ mb: 2, p: 2 }}>\r\n      <Typography variant=\"body1\" component=\"p\" mr={1} color={\"error.main\"}>\r\n        <ThermostatIcon />/<ThunderstormIcon /> Weather warning in {city}!\r\n      </Typography>\r\n      <Typography variant=\"body1\" component=\"p\" mr={1}>\r\n        {upperFirst(forecast.weather[0].description)} is expected, temperature\r\n        of about {Math.round(forecast.main.temp - 273)} C\r\n      </Typography>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default WeatherForecast;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\n\r\n// ===================== dayjs =====================\r\nimport dayjs from \"dayjs\";\r\n\r\n// ===================== mui =====================\r\nimport { Grid, Typography } from \"@mui/material\";\r\n\r\n// ===================== store =====================\r\nimport { useAppDispatch, useAppSelector } from \"../../store\";\r\nimport {\r\n  chosenExerciseSelector,\r\n  exerciseListSelector,\r\n  nextExerciseIdSelector,\r\n  trainingExerciseListSelector,\r\n} from \"../exercise/store/exercise.selectors\";\r\nimport {\r\n  clearChosenExercise,\r\n  deleteExercise,\r\n  getAllExercise,\r\n  setChosenExercise,\r\n  setTrainingExerciseList,\r\n  updateExercise,\r\n  addExercise,\r\n} from \"../exercise/store/exercise.slice\";\r\nimport { trainingListSelector } from \"./store/training.selectors\";\r\nimport { getAllTraining, updateTraining } from \"./store/training.slice\";\r\nimport { setDate } from \"../layout/store/date.slice\";\r\nimport { forecastSelector } from \"../forecast/store/forecast.selectors\";\r\n\r\n// ===================== types =====================\r\nimport { IExercise } from \"../../types/exercise.types\";\r\nimport { ActivityStatus } from \"../../types/activityStatus.enum\";\r\nimport { ITraining } from \"../../types/training.types\";\r\nimport { IForecastItem } from \"../../types/api.types\";\r\n\r\n// ===================== components =====================\r\nimport ExerciseCard from \"../components/exerciseCard.component\";\r\nimport BoardColumn from \"../components/boardLine.component\";\r\nimport AddButton from \"../components/addButton.component\";\r\nimport ExerciseForm from \"../components/exerciseForm.component\";\r\nimport WeatherForecast from \"../components/forecast.component\";\r\n\r\nconst TrainingPage = () => {\r\n  // ===== hooks =====\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n  const { trainingId } = useParams();\r\n  const isInitialLoading = useRef<boolean>(true);\r\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\r\n  const currentTraining = useRef<ITraining | undefined>(undefined);\r\n  const currentTrainingStatus = useRef<ActivityStatus>();\r\n  const [badForecast, setBadForecast] = useState<IForecastItem | null>(null);\r\n\r\n  // ===== selectors =====\r\n  const exerciseList = useAppSelector(exerciseListSelector);\r\n  const trainingList = useAppSelector(trainingListSelector);\r\n  const chosenExercise = useAppSelector(chosenExerciseSelector);\r\n  const nextExerciseId = useAppSelector(nextExerciseIdSelector);\r\n  const forecast = useAppSelector(forecastSelector);\r\n  const { toDo, inProgress, done } = useAppSelector(\r\n    trainingExerciseListSelector\r\n  );\r\n\r\n  // ===== effects =====\r\n  useEffect(() => {\r\n    if (isInitialLoading.current) {\r\n      dispatch(getAllTraining());\r\n      dispatch(getAllExercise());\r\n      isInitialLoading.current = false;\r\n      return;\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!trainingId) return;\r\n\r\n    if (!trainingList) return;\r\n\r\n    if (!trainingList.length) {\r\n      navigate(\"/training-list\");\r\n      return;\r\n    }\r\n\r\n    currentTraining.current = trainingList.find(\r\n      (training) => training.id === +trainingId\r\n    );\r\n\r\n    if (!currentTraining.current) {\r\n      navigate(\"/training-list\");\r\n      return;\r\n    }\r\n\r\n    dispatch(setDate(currentTraining.current.date));\r\n\r\n    if (!currentTraining.current.exerciseIds) return;\r\n    dispatch(setTrainingExerciseList(currentTraining.current.exerciseIds));\r\n  }, [trainingId, exerciseList, trainingList, trainingId]);\r\n\r\n  useEffect(() => {\r\n    const newStatus = getTrainingStatus();\r\n    if (newStatus === currentTrainingStatus.current) return;\r\n    if (!currentTraining.current) return;\r\n\r\n    currentTrainingStatus.current = newStatus;\r\n    dispatch(\r\n      updateTraining({\r\n        ...currentTraining.current,\r\n        status: newStatus,\r\n      })\r\n    );\r\n  }, [toDo, inProgress, done]);\r\n\r\n  useEffect(() => {\r\n    if (!currentTraining.current) return;\r\n    if (!forecast.data) return;\r\n\r\n    const trainingDay = currentTraining.current.date;\r\n\r\n    const isPastTraining = dayjs().isAfter(trainingDay, \"day\");\r\n    if (isPastTraining) return;\r\n\r\n    const trainingDayForecast = forecast.data.list.filter(({ dt_txt }) =>\r\n      dt_txt.startsWith(trainingDay)\r\n    );\r\n\r\n    const finalTrainingDayForecast =\r\n      trainingDayForecast.find(({ dt_txt }) => dt_txt.includes(\"12:00:00\")) ||\r\n      trainingDayForecast[0];\r\n\r\n    const isForecastBad =\r\n      finalTrainingDayForecast.weather[0].main === \"Rain\" ||\r\n      finalTrainingDayForecast.main.temp < 283;\r\n\r\n    if (!isForecastBad && !badForecast) setBadForecast(null);\r\n\r\n    if (isForecastBad) setBadForecast(finalTrainingDayForecast);\r\n  }, [currentTraining.current, forecast.data]);\r\n\r\n  // ===== handlers =====\r\n  const handleDragStart = (exercise: IExercise) => {\r\n    dispatch(setChosenExercise(exercise));\r\n  };\r\n\r\n  const getTrainingStatus = (): ActivityStatus => {\r\n    if (inProgress.length || (toDo.length && done.length))\r\n      return ActivityStatus.inProgress;\r\n    if (!toDo.length && done.length) return ActivityStatus.done;\r\n    return ActivityStatus.toDo;\r\n  };\r\n\r\n  const handleDrop = (status: ActivityStatus) => {\r\n    if (!chosenExercise) return;\r\n\r\n    const updatedExercise: IExercise = {\r\n      ...chosenExercise,\r\n      status,\r\n    };\r\n\r\n    dispatch(updateExercise(updatedExercise));\r\n    dispatch(clearChosenExercise());\r\n  };\r\n\r\n  const handleUpdateExercise = (exercise: IExercise) => {\r\n    dispatch(updateExercise(exercise));\r\n  };\r\n\r\n  const handleAddExerciseClick = () => {\r\n    if (!trainingId) return;\r\n\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleCreateExercise = (exercise: IExercise) => {\r\n    if (!currentTraining.current) {\r\n      setIsModalOpen(false);\r\n      navigate(\"/training-list\");\r\n      return;\r\n    }\r\n\r\n    dispatch(addExercise(exercise));\r\n    dispatch(\r\n      updateTraining({\r\n        ...currentTraining.current,\r\n        exerciseIds: [...currentTraining.current.exerciseIds, exercise.id],\r\n      })\r\n    );\r\n\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const handleDeleteExercise = (exercise: IExercise) => {\r\n    if (!currentTraining.current) {\r\n      navigate(\"/training-list\");\r\n      return;\r\n    }\r\n\r\n    dispatch(\r\n      updateTraining({\r\n        ...currentTraining.current,\r\n        exerciseIds: currentTraining.current.exerciseIds.filter(\r\n          (id) => id !== exercise.id\r\n        ),\r\n      })\r\n    );\r\n\r\n    dispatch(deleteExercise(exercise.id));\r\n    dispatch(clearChosenExercise());\r\n  };\r\n\r\n  // ===== render card function =====\r\n  const renderCard = (exercise: IExercise) => (\r\n    <ExerciseCard\r\n      key={exercise.id}\r\n      exercise={exercise}\r\n      handleDragStart={handleDragStart}\r\n      handleDelete={handleDeleteExercise}\r\n      handleUpdateExercise={handleUpdateExercise}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h4\" mt={3}>\r\n        Training exercise board\r\n      </Typography>\r\n      <Grid\r\n        container\r\n        alignSelf={\"flex-start\"}\r\n        flexGrow={1}\r\n        minHeight={\"100%\"}\r\n        p={3}\r\n      >\r\n        <BoardColumn status={ActivityStatus.toDo} handleDrop={handleDrop}>\r\n          {toDo.length ? toDo.map(renderCard) : null}\r\n          <AddButton label=\"Add one more\" onClick={handleAddExerciseClick} />\r\n        </BoardColumn>\r\n\r\n        <BoardColumn status={ActivityStatus.inProgress} handleDrop={handleDrop}>\r\n          {inProgress.length ? inProgress.map(renderCard) : null}\r\n        </BoardColumn>\r\n\r\n        <BoardColumn status={ActivityStatus.done} handleDrop={handleDrop}>\r\n          {done.length ? done.map(renderCard) : null}\r\n        </BoardColumn>\r\n      </Grid>\r\n      {trainingId ? (\r\n        <ExerciseForm\r\n          open={isModalOpen}\r\n          handleClose={() => setIsModalOpen(false)}\r\n          id={nextExerciseId}\r\n          trainingId={+trainingId}\r\n          handleSubmitForm={handleCreateExercise}\r\n        >\r\n          {badForecast && forecast.data ? (\r\n            <WeatherForecast\r\n              city={forecast.data.city.name}\r\n              forecast={badForecast}\r\n            />\r\n          ) : null}\r\n        </ExerciseForm>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TrainingPage;\r\n","import { ITheme } from \"./mainTheme\";\r\n\r\n// breakpoints\r\nexport const downMd = ({ theme }: ITheme) => theme.breakpoints.down(\"md\");\r\n\r\n// colors\r\nexport const primaryMain = ({ theme }: ITheme) => theme.palette.primary.main;\r\nexport const primaryLight = ({ theme }: ITheme) => theme.palette.primary.light;\r\nexport const primaryText = ({ theme }: ITheme) => theme.palette.primary.text;\r\nexport const primaryBackground = ({ theme }: ITheme) =>\r\n  theme.palette.primary.backgroundColor;\r\nexport const secondaryMain = ({ theme }: ITheme) =>\r\n  theme.palette.secondary.main;\r\nexport const errorMain = ({ theme }: ITheme) => theme.palette.error.main;\r\nexport const secondaryText = ({ theme }: ITheme) =>\r\n  theme.palette.secondary.text;\r\nexport const successLight = ({ theme }: ITheme) => theme.palette.success.light;\r\n","export enum DndItems {\r\n  card = \"card\",\r\n}\r\n"],"names":["_ref","label","onClick","_jsx","Button","sx","width","mt","size","variant","color","children","status","handleDrop","_useDrop","useDrop","accept","DndItems","drop","collect","monitor","isOver","item","getItem","_useDrop2","_slicedToArray","_jsxs","Grid","sm","ref","borderLeft","borderRight","borderColor","primaryLight","theme","flexDirection","alignItems","flexGrow","pl","pr","position","Typography","align","mb","style","top","left","height","zIndex","opacity","backgroundColor","exerciseListSelector","state","exercise","exerciseList","chosenExerciseSelector","chosenExercise","nextExerciseIdSelector","nextId","trainingExerciseListSelector","trainingExerciseList","forecastSelector","forecast","ExerciseTypes","createFormSchema","yup","type","oneOf","Object","values","required","value","integer","min","sets","max","ActivityStatus","updateFormSchema","open","handleClose","id","trainingId","handleSubmitForm","_useForm","useForm","mode","resolver","yupResolver","register","control","handleSubmit","watch","reset","_useForm$formState","formState","errors","isValid","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","_objectSpread","stop","_x","apply","arguments","getValueFieldLabel","running","plank","Dialog","onClose","Paper","justifyContent","p","pb","display","gap","Controller","name","render","_exercise$type","TextField","select","defaultValue","pullups","InputProps","readOnly","className","undefined","MenuItem","pushups","squats","_exercise$value","message","_exercise$sets","disabled","_exercise$status","handleDragStart","handleDelete","handleUpdateExercise","_useState","useState","_useState2","isModalOpen","setIsModalOpen","_useDrag","useDrag","isDragging","_useDrag2","drag","renderTextField","_Fragment","Card","cursor","onDragStart","CardContent","CardActions","IconButton","DeleteForeverIcon","ExerciseForm","city","component","mr","ThermostatIcon","ThunderstormIcon","upperFirst","weather","description","Math","round","main","temp","dispatch","useAppDispatch","navigate","useNavigate","useParams","isInitialLoading","useRef","currentTraining","currentTrainingStatus","_useState3","_useState4","badForecast","setBadForecast","useAppSelector","trainingList","trainingListSelector","nextExerciseId","_useAppSelector","toDo","inProgress","done","useEffect","current","getAllTraining","getAllExercise","length","find","training","setDate","date","exerciseIds","setTrainingExerciseList","newStatus","getTrainingStatus","updateTraining","trainingDay","dayjs","isAfter","trainingDayForecast","list","filter","dt_txt","startsWith","finalTrainingDayForecast","includes","isForecastBad","setChosenExercise","updatedExercise","updateExercise","clearChosenExercise","handleDeleteExercise","deleteExercise","renderCard","ExerciseCard","container","alignSelf","minHeight","BoardColumn","map","AddButton","addExercise","concat","_toConsumableArray","WeatherForecast","primaryMain","palette","primary","_ref3","light","primaryBackground","_ref5","errorMain","_ref7","error"],"sourceRoot":""}